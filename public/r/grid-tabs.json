{
  "name": "grid-tabs",
  "type": "registry:ui",
  "title": "Grid Tab Components",
  "description": "Tab interface components for Grid blocks",
  "files": [
    {
      "path": "components/grid/block-tabs.tsx",
      "type": "registry:component",
      "content": "import { forwardRef, useState } from 'react'\nimport { clsx } from 'clsx'\nimport type { Tab } from \"@/lib/grid-types\"\n\nexport interface BlockTabsProps {\n  tabs: Tab[]\n  activeTab: string\n  onTabChange: (id: string) => void\n  onTabClose?: (id: string) => void\n  className?: string\n  'aria-label'?: string\n  allowOverflow?: boolean\n\n  // Enhanced features\n  showNavigation?: boolean\n  onNavigateBack?: () => void\n  onNavigateForward?: () => void\n  canGoBack?: boolean\n  canGoForward?: boolean\n  actions?: React.ReactNode\n}\n\n/**\n * BlockTabs component for tab bar functionality\n * Supports active state, closable tabs, overflow handling, navigation, and actions\n */\nexport const BlockTabs = forwardRef<HTMLDivElement, BlockTabsProps>(\n  ({\n    tabs,\n    activeTab,\n    onTabChange,\n    onTabClose,\n    className,\n    'aria-label': ariaLabel,\n    allowOverflow = true,\n    showNavigation = false,\n    onNavigateBack,\n    onNavigateForward,\n    canGoBack = false,\n    canGoForward = false,\n    actions,\n  }, ref) => {\n    const [hoveredTab, setHoveredTab] = useState<string | null>(null)\n\n    const handleTabClick = (tab: Tab, event: React.MouseEvent) => {\n      event.preventDefault()\n      if (!tab.disabled) {\n        onTabChange(tab.id)\n      }\n    }\n\n    const handleTabClose = (tab: Tab, event: React.MouseEvent) => {\n      event.preventDefault()\n      event.stopPropagation()\n      if (onTabClose && tab.closable) {\n        onTabClose(tab.id)\n      }\n    }\n\n    const handleKeyDown = (tab: Tab, event: React.KeyboardEvent) => {\n      if (event.key === 'Enter' || event.key === ' ') {\n        event.preventDefault()\n        if (!tab.disabled) {\n          onTabChange(tab.id)\n        }\n      }\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={clsx(\n          'pretty-poly-block-tabs',\n          'flex items-center',\n          'border-b border-border',\n          'bg-card',\n          className\n        )}\n        role=\"tablist\"\n        aria-label={ariaLabel || 'Block tabs'}\n      >\n        {/* Navigation controls */}\n        {showNavigation && (\n          <div className=\"flex items-center space-x-1 px-2 border-r border-border flex-shrink-0\">\n            <button\n              onClick={onNavigateBack}\n              disabled={!canGoBack}\n              className={clsx(\n                'p-1.5 rounded hover:bg-accent transition-colors',\n                !canGoBack && 'opacity-30 cursor-not-allowed'\n              )}\n              aria-label=\"Navigate back\"\n              title=\"Go back\"\n            >\n              <svg className=\"w-4 h-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n              </svg>\n            </button>\n            <button\n              onClick={onNavigateForward}\n              disabled={!canGoForward}\n              className={clsx(\n                'p-1.5 rounded hover:bg-accent transition-colors',\n                !canGoForward && 'opacity-30 cursor-not-allowed'\n              )}\n              aria-label=\"Navigate forward\"\n              title=\"Go forward\"\n            >\n              <svg className=\"w-4 h-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n              </svg>\n            </button>\n          </div>\n        )}\n\n        {/* Tabs container */}\n        <div className={clsx(\n          'flex items-center min-w-0 flex-1',\n          allowOverflow ? 'overflow-x-auto' : 'overflow-x-hidden'\n        )}>\n          {tabs.map((tab) => {\n            const isActive = tab.id === activeTab\n            const isHovered = hoveredTab === tab.id\n            const Icon = tab.icon\n\n            return (\n              <div\n                key={tab.id}\n                className={clsx(\n                  'flex items-center space-x-2 px-3 py-2 text-sm cursor-pointer',\n                  'border-b-2 transition-colors duration-150',\n                  'min-w-0 flex-shrink-0', // Prevent shrinking\n                  isActive\n                    ? 'border-primary text-primary bg-accent'\n                    : 'border-transparent text-muted-foreground hover:text-foreground hover:bg-accent',\n                  tab.disabled && 'opacity-50 cursor-not-allowed',\n                  tab.isPinned && 'bg-accent/50',\n                  !allowOverflow && 'flex-1' // Equal width tabs when overflow disabled\n                )}\n                role=\"tab\"\n                aria-selected={isActive}\n                aria-disabled={tab.disabled}\n                tabIndex={tab.disabled ? -1 : 0}\n                onClick={(e) => handleTabClick(tab, e)}\n                onKeyDown={(e) => handleKeyDown(tab, e)}\n                onMouseEnter={() => setHoveredTab(tab.id)}\n                onMouseLeave={() => setHoveredTab(null)}\n                data-tab-id={tab.id}\n                data-tab-dirty={tab.isDirty}\n                data-tab-pinned={tab.isPinned}\n              >\n                {/* Pin indicator */}\n                {tab.isPinned && (\n                  <svg\n                    className=\"w-3 h-3 flex-shrink-0 text-muted-foreground\"\n                    fill=\"currentColor\"\n                    viewBox=\"0 0 20 20\"\n                    aria-label=\"Pinned\"\n                  >\n                    <title>Pinned</title>\n                    <path d=\"M10 2a1 1 0 011 1v1.323l3.954 1.582 1.599-.8a1 1 0 01.894 1.79l-1.233.616 1.738 5.42a1 1 0 01-.285 1.05A3.989 3.989 0 0115 15a3.989 3.989 0 01-2.667-1.019 1 1 0 01-.285-1.05l1.738-5.42-1.233-.617a1 1 0 01.894-1.788l1.599.799L11 4.323V3a1 1 0 011-1h-2z\" />\n                  </svg>\n                )}\n\n                {/* Tab icon */}\n                {Icon && (\n                  <Icon className=\"w-4 h-4 flex-shrink-0\" />\n                )}\n\n                {/* Tab label */}\n                <span className=\"truncate min-w-0\">\n                  {tab.label}\n                </span>\n\n                {/* Dirty indicator */}\n                {tab.isDirty && (\n                  <div\n                    className=\"w-2 h-2 rounded-full bg-primary flex-shrink-0\"\n                    title=\"Unsaved changes\"\n                    aria-label=\"Has unsaved changes\"\n                  />\n                )}\n\n                {/* Close button */}\n                {tab.closable && onTabClose && !tab.isPinned && (\n                  <button\n                    className={clsx(\n                      'flex-shrink-0 w-4 h-4 rounded-sm hover:bg-muted',\n                      'flex items-center justify-center',\n                      'transition-colors duration-150',\n                      isHovered || isActive ? 'opacity-100' : 'opacity-0'\n                    )}\n                    onClick={(e) => handleTabClose(tab, e)}\n                    aria-label={`Close ${tab.label} tab`}\n                    tabIndex={-1}\n                  >\n                    <svg\n                      className=\"w-3 h-3\"\n                      fill=\"none\"\n                      viewBox=\"0 0 24 24\"\n                      stroke=\"currentColor\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M6 18L18 6M6 6l12 12\"\n                      />\n                    </svg>\n                  </button>\n                )}\n              </div>\n            )\n          })}\n        </div>\n\n        {/* Actions section */}\n        {actions && (\n          <div className=\"flex items-center space-x-2 px-2 border-l border-border flex-shrink-0\">\n            {actions}\n          </div>\n        )}\n      </div>\n    )\n  }\n)\n\nBlockTabs.displayName = 'Block.Tabs'",
      "target": "components/grid/block-tabs.tsx"
    }
  ],
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [
    "grid-system"
  ]
}