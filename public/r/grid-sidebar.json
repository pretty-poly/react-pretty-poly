{
  "name": "grid-sidebar",
  "type": "registry:ui",
  "title": "Grid Sidebar Components",
  "description": "Sidebar components for Grid blocks",
  "files": [
    {
      "path": "components/grid/block-sidebar.tsx",
      "type": "registry:component",
      "content": "import { forwardRef } from 'react'\nimport { clsx } from 'clsx'\n\nexport type SidebarPosition = 'left' | 'right'\n\nexport interface BlockSidebarProps {\n  position?: SidebarPosition\n  width?: number\n  className?: string\n  children: React.ReactNode\n  'aria-label'?: string\n}\n\n/**\n * BlockSidebar component for VS Code-style vertical icon bars\n * Creates a fixed-width vertical navigation sidebar within a block\n */\nexport const BlockSidebar = forwardRef<HTMLDivElement, BlockSidebarProps>(\n  ({ position = 'left', width = 48, className, children, 'aria-label': ariaLabel }, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={clsx(\n          'pretty-poly-block-sidebar',\n          'flex flex-col',\n          'flex-shrink-0', // Don't shrink\n          'h-full', // Full height\n          'bg-sidebar', // VS Code-style sidebar background (adapts to theme)\n          'border-sidebar-border', // Border color\n          position === 'left' ? 'border-r' : 'border-l', // Border on appropriate side\n          position === 'right' && 'order-last', // Move to right if specified\n          className\n        )}\n        style={{ width: `${width}px` }}\n        data-sidebar-position={position}\n        data-sidebar-width={width}\n        aria-label={ariaLabel || 'Sidebar navigation'}\n        role=\"navigation\"\n      >\n        {children}\n      </div>\n    )\n  }\n)\n\nBlockSidebar.displayName = 'Block.Sidebar'",
      "target": "components/grid/block-sidebar.tsx"
    },
    {
      "path": "components/grid/block-sidebar-item.tsx",
      "type": "registry:component",
      "content": "import { forwardRef, useState } from 'react'\nimport { clsx } from 'clsx'\n\nexport interface BlockSidebarItemProps {\n  icon: React.ComponentType<{ className?: string }>\n  tooltip?: string\n  active?: boolean\n  disabled?: boolean\n  badge?: number | string\n  onClick?: () => void\n  className?: string\n  'aria-label'?: string\n}\n\n/**\n * BlockSidebarItem component for individual sidebar items\n * VS Code-style icon buttons with tooltips and active states\n */\nexport const BlockSidebarItem = forwardRef<HTMLButtonElement, BlockSidebarItemProps>(\n  ({\n    icon: Icon,\n    tooltip,\n    active = false,\n    disabled = false,\n    badge,\n    onClick,\n    className,\n    'aria-label': ariaLabel\n  }, ref) => {\n    const [showTooltip, setShowTooltip] = useState(false)\n\n    const handleMouseEnter = () => {\n      if (tooltip && !disabled) {\n        setShowTooltip(true)\n      }\n    }\n\n    const handleMouseLeave = () => {\n      setShowTooltip(false)\n    }\n\n    const handleClick = () => {\n      if (!disabled && onClick) {\n        onClick()\n      }\n    }\n\n    const handleKeyDown = (event: React.KeyboardEvent) => {\n      if (event.key === 'Enter' || event.key === ' ') {\n        event.preventDefault()\n        handleClick()\n      }\n    }\n\n    return (\n      <div className=\"relative\">\n        <button\n          ref={ref}\n          className={clsx(\n            'pretty-poly-sidebar-item',\n            'w-full h-12', // Fixed height for consistency\n            'flex items-center justify-center',\n            'relative',\n            'transition-colors duration-150',\n            'focus:outline-none focus:ring-2 focus:ring-ring focus:ring-inset',\n            // Active state\n            active && 'bg-accent border-r-2 border-primary',\n            // Hover state (when not disabled)\n            !disabled && 'hover:bg-accent',\n            // Disabled state\n            disabled && 'opacity-50 cursor-not-allowed',\n            // Default cursor\n            !disabled && 'cursor-pointer',\n            className\n          )}\n          disabled={disabled}\n          onClick={handleClick}\n          onKeyDown={handleKeyDown}\n          onMouseEnter={handleMouseEnter}\n          onMouseLeave={handleMouseLeave}\n          aria-label={ariaLabel || tooltip}\n          aria-pressed={active}\n          tabIndex={disabled ? -1 : 0}\n        >\n          {/* Icon */}\n          <Icon\n            className={clsx(\n              'w-5 h-5',\n              active ? 'text-primary' : 'text-muted-foreground',\n              !disabled && 'group-hover:text-foreground'\n            )}\n          />\n\n          {/* Badge */}\n          {badge && (\n            <div className=\"absolute -top-1 -right-1 min-w-4 h-4 bg-destructive text-destructive-foreground text-xs rounded-full flex items-center justify-center px-1\">\n              {typeof badge === 'number' && badge > 99 ? '99+' : badge}\n            </div>\n          )}\n\n          {/* Active indicator */}\n          {active && (\n            <div className=\"absolute left-0 top-1/2 transform -translate-y-1/2 w-0.5 h-6 bg-primary\" />\n          )}\n        </button>\n\n        {/* Tooltip */}\n        {showTooltip && tooltip && (\n          <div className=\"absolute left-full ml-2 top-1/2 transform -translate-y-1/2 z-50\">\n            <div className=\"bg-popover text-popover-foreground text-xs px-2 py-1 rounded shadow-lg whitespace-nowrap border border-border\">\n              {tooltip}\n              {/* Tooltip arrow */}\n              <div className=\"absolute right-full top-1/2 transform -translate-y-1/2 border-4 border-transparent border-r-popover\" />\n            </div>\n          </div>\n        )}\n      </div>\n    )\n  }\n)\n\nBlockSidebarItem.displayName = 'Block.Sidebar.Item'",
      "target": "components/grid/block-sidebar-item.tsx"
    },
    {
      "path": "components/grid/block-sidebar-spacer.tsx",
      "type": "registry:component",
      "content": "import { forwardRef } from 'react'\nimport { clsx } from 'clsx'\n\nexport interface BlockSidebarSpacerProps {\n  className?: string\n}\n\n/**\n * BlockSidebarSpacer component for flexible spacing in sidebars\n * Pushes subsequent items to the bottom of the sidebar\n */\nexport const BlockSidebarSpacer = forwardRef<HTMLDivElement, BlockSidebarSpacerProps>(\n  ({ className }, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={clsx(\n          'pretty-poly-sidebar-spacer',\n          'flex-1', // Takes up all available space\n          'min-h-2', // Minimum height to ensure visibility\n          className\n        )}\n        role=\"separator\"\n        aria-hidden=\"true\"\n      />\n    )\n  }\n)\n\nBlockSidebarSpacer.displayName = 'Block.Sidebar.Spacer'",
      "target": "components/grid/block-sidebar-spacer.tsx"
    }
  ],
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [
    "grid-system"
  ]
}