{
  "name": "grid-tabs",
  "type": "registry:ui",
  "title": "Grid Tab Components",
  "description": "Tab interface components for Grid blocks",
  "files": [
    {
      "path": "components/grid/block-tabs.tsx",
      "type": "registry:component",
      "content": "import { forwardRef, useState } from 'react'\nimport { clsx } from 'clsx'\n\nexport interface Tab {\n  id: string\n  label: string\n  icon?: React.ComponentType<{ className?: string }>\n  closable?: boolean\n  disabled?: boolean\n}\n\nexport interface BlockTabsProps {\n  tabs: Tab[]\n  activeTab: string\n  onTabChange: (id: string) => void\n  onTabClose?: (id: string) => void\n  className?: string\n  'aria-label'?: string\n  allowOverflow?: boolean\n}\n\n/**\n * BlockTabs component for tab bar functionality\n * Supports active state, closable tabs, and overflow handling\n */\nexport const BlockTabs = forwardRef<HTMLDivElement, BlockTabsProps>(\n  ({\n    tabs,\n    activeTab,\n    onTabChange,\n    onTabClose,\n    className,\n    'aria-label': ariaLabel,\n    allowOverflow = true\n  }, ref) => {\n    const [hoveredTab, setHoveredTab] = useState<string | null>(null)\n\n    const handleTabClick = (tab: Tab, event: React.MouseEvent) => {\n      event.preventDefault()\n      if (!tab.disabled) {\n        onTabChange(tab.id)\n      }\n    }\n\n    const handleTabClose = (tab: Tab, event: React.MouseEvent) => {\n      event.preventDefault()\n      event.stopPropagation()\n      if (onTabClose && tab.closable) {\n        onTabClose(tab.id)\n      }\n    }\n\n    const handleKeyDown = (tab: Tab, event: React.KeyboardEvent) => {\n      if (event.key === 'Enter' || event.key === ' ') {\n        event.preventDefault()\n        if (!tab.disabled) {\n          onTabChange(tab.id)\n        }\n      }\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={clsx(\n          'pretty-poly-block-tabs',\n          'flex items-center',\n          'border-b border-border',\n          'bg-card',\n          allowOverflow ? 'overflow-x-auto' : 'overflow-x-hidden',\n          className\n        )}\n        role=\"tablist\"\n        aria-label={ariaLabel || 'Block tabs'}\n      >\n        <div className=\"flex items-center min-w-0\">\n          {tabs.map((tab) => {\n            const isActive = tab.id === activeTab\n            const isHovered = hoveredTab === tab.id\n            const Icon = tab.icon\n\n            return (\n              <div\n                key={tab.id}\n                className={clsx(\n                  'flex items-center space-x-2 px-3 py-2 text-sm cursor-pointer',\n                  'border-b-2 transition-colors duration-150',\n                  'min-w-0 flex-shrink-0', // Prevent shrinking\n                  isActive\n                    ? 'border-primary text-primary bg-accent'\n                    : 'border-transparent text-muted-foreground hover:text-foreground hover:bg-accent',\n                  tab.disabled && 'opacity-50 cursor-not-allowed',\n                  !allowOverflow && 'flex-1' // Equal width tabs when overflow disabled\n                )}\n                role=\"tab\"\n                aria-selected={isActive}\n                aria-disabled={tab.disabled}\n                tabIndex={tab.disabled ? -1 : 0}\n                onClick={(e) => handleTabClick(tab, e)}\n                onKeyDown={(e) => handleKeyDown(tab, e)}\n                onMouseEnter={() => setHoveredTab(tab.id)}\n                onMouseLeave={() => setHoveredTab(null)}\n                data-tab-id={tab.id}\n              >\n                {/* Tab icon */}\n                {Icon && (\n                  <Icon className=\"w-4 h-4 flex-shrink-0\" />\n                )}\n\n                {/* Tab label */}\n                <span className=\"truncate min-w-0\">\n                  {tab.label}\n                </span>\n\n                {/* Close button */}\n                {tab.closable && onTabClose && (\n                  <button\n                    className={clsx(\n                      'flex-shrink-0 w-4 h-4 rounded-sm hover:bg-muted',\n                      'flex items-center justify-center',\n                      'transition-colors duration-150',\n                      isHovered || isActive ? 'opacity-100' : 'opacity-0'\n                    )}\n                    onClick={(e) => handleTabClose(tab, e)}\n                    aria-label={`Close ${tab.label} tab`}\n                    tabIndex={-1}\n                  >\n                    <svg\n                      className=\"w-3 h-3\"\n                      fill=\"none\"\n                      viewBox=\"0 0 24 24\"\n                      stroke=\"currentColor\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M6 18L18 6M6 6l12 12\"\n                      />\n                    </svg>\n                  </button>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\n\nBlockTabs.displayName = 'Block.Tabs'",
      "target": "components/grid/block-tabs.tsx"
    }
  ],
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [
    "grid-system"
  ]
}